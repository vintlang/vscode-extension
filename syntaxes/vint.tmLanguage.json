{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Vint Programming Language",
    "scopeName": "source.vint",
    "fileTypes": ["vint"],
    "patterns": [
        { "include": "#linecomments" },
        { "include": "#blockcomments" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#constants" },
        { "include": "#keywords" },
        { "include": "#functions" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#identifiers" },
        { "include": "#groups" }
    ],
    "repository": {
        "linecomments": {
            "name": "comment.line.double-slash.vint",
            "match": "//.*$",
            "captures": {
                "0": { "name": "punctuation.definition.comment.vint" }
            }
        },
        "blockcomments": {
            "name": "comment.block.vint",
            "begin": "/\\*",
            "end": "\\*/",
            "captures": {
                "0": { "name": "punctuation.definition.comment.vint" }
            }
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.vint",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        { 
                            "name": "constant.character.escape.vint", 
                            "match": "\\\\[\"'\\\\nrtbf/]" 
                        },
                        { 
                            "name": "constant.character.escape.unicode.vint", 
                            "match": "\\\\u[0-9A-Fa-f]{4}" 
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.vint",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        { 
                            "name": "constant.character.escape.vint", 
                            "match": "\\\\[\"'\\\\nrtbf/]" 
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.vint",
                    "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.decimal.vint",
                    "match": "\\b\\d+([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.hex.vint",
                    "match": "\\b0[xX][0-9A-Fa-f]+\\b"
                },
                {
                    "name": "constant.numeric.octal.vint",
                    "match": "\\b0[oO][0-7]+\\b"
                },
                {
                    "name": "constant.numeric.binary.vint",
                    "match": "\\b0[bB][01]+\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.boolean.vint",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.null.vint",
                    "match": "\\bnull\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "storage.type.function.vint",
                    "match": "\\b(func|declare|return)\\b"
                },
                {
                    "name": "storage.type.variable.vint",
                    "match": "\\b(let)\\b"
                },
                {
                    "name": "storage.modifier.vint",
                    "match": "\\b(defer)\\b"
                },
                {
                    "name": "keyword.control.import.vint",
                    "match": "\\b(import|package|include)\\b"
                },
                {
                    "name": "keyword.control.conditional.vint",
                    "match": "\\b(if|else|elif)\\b"
                },
                {
                    "name": "keyword.control.loop.vint",
                    "match": "\\b(while|for|in|break|continue)\\b"
                },
                {
                    "name": "keyword.control.switch.vint",
                    "match": "\\b(switch|case|default)\\b"
                },
                {
                    "name": "keyword.control.exception.vint",
                    "match": "\\b(try|catch|throw|finally)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "support.function.builtin.io.vint",
                    "match": "\\b(print|println|write)\\b"
                },
                {
                    "name": "support.function.builtin.type.vint",
                    "match": "\\b(type|convert|has_key|len|range)\\b"
                },
                {
                    "name": "support.function.builtin.string.vint",
                    "match": "\\b(split|join|replace|contains|startsWith|endsWith|trim|upper|lower)\\b"
                },
                {
                    "name": "support.function.builtin.array.vint",
                    "match": "\\b(push|pop|shift|unshift|slice|splice|sort|reverse)\\b"
                },
                {
                    "name": "support.function.builtin.math.vint",
                    "match": "\\b(abs|ceil|floor|round|max|min|sqrt|pow|random)\\b"
                },
                {
                    "name": "support.function.builtin.system.vint",
                    "match": "\\b(exec|env|args|exit)\\b"
                },
                {
                    "name": "entity.name.function.definition.vint",
                    "match": "(?<=let\\s+)[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*=\\s*func)"
                },
                {
                    "name": "entity.name.function.call.vint",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.vint",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.logical.vint",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.arithmetic.vint",
                    "match": "(\\+|\\-|\\*|\\/|%|\\^|\\*\\*)"
                },
                {
                    "name": "keyword.operator.assignment.vint",
                    "match": "(=|\\+=|\\-=|\\*=|\\/=|%=)"
                },
                {
                    "name": "keyword.operator.increment.vint",
                    "match": "(\\+\\+|\\-\\-)"
                },
                {
                    "name": "punctuation.accessor.vint",
                    "match": "\\."
                }
            ]
        },
        "punctuation": {
            "patterns": [
                { 
                    "name": "punctuation.separator.comma.vint", 
                    "match": "," 
                },
                { 
                    "name": "punctuation.terminator.statement.vint", 
                    "match": ";" 
                },
                { 
                    "name": "punctuation.separator.colon.vint", 
                    "match": ":" 
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "support.constant.module.vint",
                    "match": "\\b(time|net|os|json|csv|regex|crypto|encoding|colors|term|math|string|array)\\b"
                },
                {
                    "name": "variable.other.constant.vint",
                    "match": "\\b[A-Z][A-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.vint",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "groups": {
            "patterns": [
                {
                    "name": "punctuation.definition.block.vint",
                    "match": "[{}]"
                },
                {
                    "name": "punctuation.definition.group.vint",
                    "match": "[()]"
                },
                {
                    "name": "punctuation.definition.array.vint",
                    "match": "[\\[\\]]"
                }
            ]
        }
    }
}
