{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Vint Programming Language",
    "scopeName": "source.vint",
    "fileTypes": ["vint"],
    "patterns": [
        { "include": "#linecomments" },
        { "include": "#blockcomments" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#numbers" },
        { "include": "#constant" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#identifiers" },
        { "include": "#groups" },
        { "include": "#regex" }
    ],
    "repository": {
        "linecomments": {
            "name": "comment.line.double-slash.vint",
            "match": "//.*$",
            "captures": {
                "1": { "name": "punctuation.definition.comment.vint" }
            }
        },
        "blockcomments": {
            "name": "comment.block.vint",
            "begin": "/\\*",
            "end": "\\*/",
            "captures": {
                "0": { "name": "punctuation.definition.comment.vint" }
            }
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.vint",
                    "match": "\\b\\d+(\\.\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.hex.vint",
                    "match": "\\b0x[0-9A-Fa-f]+\\b"
                },
                {
                    "name": "constant.numeric.octal.vint",
                    "match": "\\b0o[0-7]+\\b"
                },
                {
                    "name": "constant.numeric.binary.vint",
                    "match": "\\b0b[01]+\\b"
                }
            ]
        },
        "constant": {
            "name": "constant.language.vint",
            "match": "\\b(true|false|null)\\b"
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.vint",
                    "match": "\\+|\\-|%|\\*|\\/|\\^|\\*\\*"
                },
                {
                    "name": "keyword.operator.logical.vint",
                    "match": "==|<=|>=|<|>|&&|\\|\\|"
                },
                {
                    "name": "keyword.operator.assignment.vint",
                    "match": "=|:="
                },
                {
                    "name": "punctuation.accessor.vint",
                    "match": "\\."
                }
            ]
        },
        "punctuation": {
            "patterns": [
                { "name": "punctuation.separator", "match": "," },
                { "include": "#groups" }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "storage.type.function.vint",
                    "match": "\\b(func|declare|return)\\b"
                },
                {
                    "name": "storage.type.vint",
                    "match": "\\b(let|package|import)\\b"
                },
                {
                    "name": "support.function.builtin.vint",
                    "match": "\\b(print|println|convert|type|write)\\b"
                },
                {
                    "name": "keyword.control.vint",
                    "match": "\\b(if|else|while|break|continue|for|switch|case|default|in)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.vint",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        { "name": "constant.character.escape.vint", "match": "\\\\." }
                    ]
                },
                {
                    "name": "string.quoted.single.vint",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        { "name": "constant.character.escape.vint", "match": "\\\\." }
                    ]
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "meta.functioncall.vint",
                    "match": "\\b([_A-Za-z][_A-Za-z0-9]*)\\b(?=\\()",
                    "captures": {
                        "1": { "name": "entity.name.function.vint" }
                    }
                },
                {
                    "name": "variable.other.vint",
                    "match": "\\b[_A-Za-z][_A-Za-z0-9]*\\b"
                }
            ]
        },
        "groups": {
            "patterns": [
                {
                    "name": "punctuation.definition.group.vint",
                    "match": "[()\\[\\]{}]"
                }
            ]
        },
        "regex": {
            "patterns": [
                {
                    "name": "string.regexp.vint",
                    "begin": "/",
                    "end": "/",
                    "patterns": [
                        { "name": "constant.character.escape.vint", "match": "\\\\." }
                    ]
                }
            ]
        }
    }
}
