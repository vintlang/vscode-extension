{
    "Function": {
        "prefix": "func",
        "body": [
            "let ${1:functionName} = func(${2:params}) {",
            "\t${3:// function body}",
            "\treturn ${4:value}",
            "}"
        ],
        "description": "Create a function definition"
    },
    "Anonymous Function": {
        "prefix": "afunc",
        "body": [
            "func(${1:params}) {",
            "\t${2:// function body}",
            "\treturn ${3:value}",
            "}"
        ],
        "description": "Create an anonymous function"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t${2:// code}",
            "}"
        ],
        "description": "Create an if statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "\t${2:// code}",
            "} else {",
            "\t${3:// alternative code}",
            "}"
        ],
        "description": "Create an if-else statement"
    },
    "If-Elif-Else Statement": {
        "prefix": "ifelif",
        "body": [
            "if (${1:condition1}) {",
            "\t${2:// code}",
            "} elif (${3:condition2}) {",
            "\t${4:// code}",
            "} else {",
            "\t${5:// alternative code}",
            "}"
        ],
        "description": "Create an if-elif-else statement"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:collection} {",
            "\t${3:// code}",
            "}"
        ],
        "description": "Create a for loop"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "\t${2:// code}",
            "}"
        ],
        "description": "Create a while loop"
    },
    "Switch Case": {
        "prefix": "switch",
        "body": [
            "switch (${1:expression}) {",
            "\tcase ${2:value1}:",
            "\t\t${3:// code}",
            "\t\tbreak",
            "\tcase ${4:value2}:",
            "\t\t${5:// code}",
            "\t\tbreak",
            "\tdefault:",
            "\t\t${6:// default code}",
            "}"
        ],
        "description": "Create a switch-case statement"
    },
    "Try-Catch": {
        "prefix": "try",
        "body": [
            "try {",
            "\t${1:// code that might throw}",
            "} catch (${2:error}) {",
            "\t${3:// error handling}",
            "}"
        ],
        "description": "Create a try-catch block"
    },
    "Try-Catch-Finally": {
        "prefix": "tryfinally",
        "body": [
            "try {",
            "\t${1:// code that might throw}",
            "} catch (${2:error}) {",
            "\t${3:// error handling}",
            "} finally {",
            "\t${4:// cleanup code}",
            "}"
        ],
        "description": "Create a try-catch-finally block"
    },
    "Variable Declaration": {
        "prefix": "let",
        "body": [
            "let ${1:variableName} = ${2:value}"
        ],
        "description": "Declare a variable"
    },
    "Print Statement": {
        "prefix": "print",
        "body": [
            "print(${1:value})"
        ],
        "description": "Print a value"
    },
    "Println Statement": {
        "prefix": "println",
        "body": [
            "println(${1:value})"
        ],
        "description": "Print a value with newline"
    },
    "Import Statement": {
        "prefix": "import",
        "body": [
            "import ${1:module}"
        ],
        "description": "Import a module"
    },
    "Multiple Imports": {
        "prefix": "imports",
        "body": [
            "import ${1:module1}",
            "import ${2:module2}",
            "import ${3:module3}"
        ],
        "description": "Import multiple modules"
    },
    "Package Declaration": {
        "prefix": "package",
        "body": [
            "package ${1:packageName} {",
            "\t${2:// package content}",
            "}"
        ],
        "description": "Declare a package"
    },
    "Convert Statement": {
        "prefix": "convert",
        "body": [
            "convert(${1:value}, \"${2:TYPE}\")"
        ],
        "description": "Convert a value to a specific type"
    },
    "Type Check": {
        "prefix": "type",
        "body": [
            "type(${1:value})"
        ],
        "description": "Get the type of a value"
    },
    "Array Declaration": {
        "prefix": "array",
        "body": [
            "let ${1:arrayName} = [${2:elements}]"
        ],
        "description": "Declare an array"
    },
    "Object Declaration": {
        "prefix": "object",
        "body": [
            "let ${1:objectName} = {",
            "\t${2:key}: ${3:value}",
            "}"
        ],
        "description": "Declare an object"
    },
    "HTTP GET Request": {
        "prefix": "httpget",
        "body": [
            "import net",
            "",
            "let ${1:response} = net.get(\"${2:url}\")",
            "print(${1:response})"
        ],
        "description": "Make an HTTP GET request"
    },
    "HTTP POST Request": {
        "prefix": "httppost",
        "body": [
            "import net",
            "",
            "let ${1:data} = {${2:key}: \"${3:value}\"}",
            "let ${4:response} = net.post(\"${5:url}\", ${1:data})",
            "print(${4:response})"
        ],
        "description": "Make an HTTP POST request"
    },
    "JSON Parse": {
        "prefix": "jsonparse",
        "body": [
            "import json",
            "",
            "let ${1:data} = json.parse(${2:jsonString})"
        ],
        "description": "Parse JSON string"
    },
    "JSON Stringify": {
        "prefix": "jsonstringify",
        "body": [
            "import json",
            "",
            "let ${1:jsonString} = json.stringify(${2:object})"
        ],
        "description": "Convert object to JSON string"
    },
    "Time Now": {
        "prefix": "timenow",
        "body": [
            "import time",
            "",
            "let ${1:now} = time.now()",
            "print(${1:now})"
        ],
        "description": "Get current timestamp"
    },
    "File Read": {
        "prefix": "fileread",
        "body": [
            "import os",
            "",
            "let ${1:content} = os.readFile(\"${2:filename}\")",
            "print(${1:content})"
        ],
        "description": "Read a file"
    },
    "File Write": {
        "prefix": "filewrite",
        "body": [
            "import os",
            "",
            "os.writeFile(\"${1:filename}\", \"${2:content}\")"
        ],
        "description": "Write to a file"
    },
    "Defer Statement": {
        "prefix": "defer",
        "body": [
            "defer ${1:expression}"
        ],
        "description": "Defer execution until function returns"
    },
    "Range Loop": {
        "prefix": "range",
        "body": [
            "for ${1:i} in range(${2:start}, ${3:end}) {",
            "\t${4:// code}",
            "}"
        ],
        "description": "Create a range-based for loop"
    },
    "String Split": {
        "prefix": "split",
        "body": [
            "let ${1:parts} = ${2:string}.split(\"${3:delimiter}\")"
        ],
        "description": "Split a string"
    },
    "Array Join": {
        "prefix": "join",
        "body": [
            "let ${1:result} = ${2:array}.join(\"${3:separator}\")"
        ],
        "description": "Join array elements into a string"
    },
    "Error Handling": {
        "prefix": "error",
        "body": [
            "if (${1:errorCondition}) {",
            "\tthrow \"${2:Error message}\"",
            "}"
        ],
        "description": "Create error handling"
    },
    "Class-like Structure": {
        "prefix": "class",
        "body": [
            "let ${1:ClassName} = func(${2:params}) {",
            "\tlet self = {}",
            "\t",
            "\t// Properties",
            "\tself.${3:property} = ${4:value}",
            "\t",
            "\t// Methods",
            "\tself.${5:method} = func() {",
            "\t\t${6:// method body}",
            "\t}",
            "\t",
            "\treturn self",
            "}"
        ],
        "description": "Create a class-like structure"
    },
    "Main Function": {
        "prefix": "main",
        "body": [
            "let main = func() {",
            "\t${1:// main program logic}",
            "}",
            "",
            "main()"
        ],
        "description": "Create a main function"
    },
    "Comment Block": {
        "prefix": "comment",
        "body": [
            "/*",
            " * ${1:Description}",
            " * ",
            " * @param {${2:type}} ${3:param} - ${4:description}",
            " * @return {${5:type}} ${6:description}",
            " */"
        ],
        "description": "Create a documentation comment block"
    },
    "Read File": {
        "prefix": "readfile",
        "body": [
            "let ${1:content} = readFile(\"${2:path/to/file.txt}\")"
        ],
        "description": "Read contents from a file"
    },
    "Write File": {
        "prefix": "writefile",
        "body": [
            "writeFile(\"${1:path/to/file.txt}\", ${2:content})"
        ],
        "description": "Write content to a file"
    },
    "Append to File": {
        "prefix": "appendfile",
        "body": [
            "appendFile(\"${1:path/to/file.txt}\", ${2:content})"
        ],
        "description": "Append content to a file"
    },
    "Check File Exists": {
        "prefix": "fileexists",
        "body": [
            "if (fileExists(\"${1:path/to/file.txt}\")) {",
            "\t${2:// file exists}",
            "}"
        ],
        "description": "Check if a file exists"
    },
    "Read Directory": {
        "prefix": "readdir",
        "body": [
            "let ${1:files} = readDir(\"${2:path/to/directory}\")"
        ],
        "description": "Read directory contents"
    },
    "Make Directory": {
        "prefix": "makedir",
        "body": [
            "makeDir(\"${1:path/to/directory}\")"
        ],
        "description": "Create a directory"
    },
    "Parse Integer": {
        "prefix": "parseint",
        "body": [
            "let ${1:number} = parseInt(${2:string})"
        ],
        "description": "Parse string to integer"
    },
    "Parse Float": {
        "prefix": "parsefloat",
        "body": [
            "let ${1:number} = parseFloat(${2:string})"
        ],
        "description": "Parse string to float"
    },
    "To Fixed Decimals": {
        "prefix": "tofixed",
        "body": [
            "let ${1:formatted} = toFixed(${2:number}, ${3:2})"
        ],
        "description": "Format number to fixed decimal places"
    },
    "Get Map Keys": {
        "prefix": "keys",
        "body": [
            "let ${1:keyArray} = keys(${2:map})"
        ],
        "description": "Get array of map keys"
    },
    "Get Map Values": {
        "prefix": "values",
        "body": [
            "let ${1:valueArray} = values(${2:map})"
        ],
        "description": "Get array of map values"
    },
    "Merge Maps": {
        "prefix": "merge",
        "body": [
            "let ${1:merged} = merge(${2:map1}, ${3:map2})"
        ],
        "description": "Merge two maps"
    },
    "Clone Object": {
        "prefix": "clone",
        "body": [
            "let ${1:copy} = clone(${2:original})"
        ],
        "description": "Create a deep copy of an object"
    },
    "Substring": {
        "prefix": "substring",
        "body": [
            "let ${1:part} = substring(${2:string}, ${3:start}, ${4:end})"
        ],
        "description": "Extract a portion of a string"
    },
    "Index Of": {
        "prefix": "indexof",
        "body": [
            "let ${1:index} = indexOf(${2:string}, ${3:searchValue})"
        ],
        "description": "Find the first occurrence of a value"
    },
    "Last Index Of": {
        "prefix": "lastindexof",
        "body": [
            "let ${1:index} = lastIndexOf(${2:string}, ${3:searchValue})"
        ],
        "description": "Find the last occurrence of a value"
    },
    "Char At": {
        "prefix": "charat",
        "body": [
            "let ${1:char} = charAt(${2:string}, ${3:index})"
        ],
        "description": "Get character at index"
    },
    "Char Code At": {
        "prefix": "charcodeat",
        "body": [
            "let ${1:code} = charCodeAt(${2:string}, ${3:index})"
        ],
        "description": "Get Unicode value of character"
    },
    "Pad Start": {
        "prefix": "padstart",
        "body": [
            "let ${1:padded} = padStart(${2:string}, ${3:length}, ${4:padString})"
        ],
        "description": "Pad string from the start"
    },
    "Pad End": {
        "prefix": "padend",
        "body": [
            "let ${1:padded} = padEnd(${2:string}, ${3:length}, ${4:padString})"
        ],
        "description": "Pad string from the end"
    },
    "Repeat": {
        "prefix": "repeat",
        "body": [
            "let ${1:repeated} = repeat(${2:string}, ${3:count})"
        ],
        "description": "Repeat a string"
    },
    "Map Array": {
        "prefix": "map",
        "body": [
            "let ${1:result} = map(${2:array}, func(${3:item}) {",
            "\treturn ${4:item}",
            "})"
        ],
        "description": "Transform array elements"
    },
    "Filter Array": {
        "prefix": "filter",
        "body": [
            "let ${1:result} = filter(${2:array}, func(${3:item}) {",
            "\treturn ${4:condition}",
            "})"
        ],
        "description": "Filter array elements"
    },
    "Reduce Array": {
        "prefix": "reduce",
        "body": [
            "let ${1:result} = reduce(${2:array}, func(${3:acc}, ${4:item}) {",
            "\treturn ${5:acc + item}",
            "}, ${6:initialValue})"
        ],
        "description": "Reduce array to single value"
    },
    "Find In Array": {
        "prefix": "find",
        "body": [
            "let ${1:result} = find(${2:array}, func(${3:item}) {",
            "\treturn ${4:condition}",
            "})"
        ],
        "description": "Find first element matching condition"
    },
    "Find Index": {
        "prefix": "findindex",
        "body": [
            "let ${1:index} = findIndex(${2:array}, func(${3:item}) {",
            "\treturn ${4:condition}",
            "})"
        ],
        "description": "Find index of first matching element"
    },
    "Includes": {
        "prefix": "includes",
        "body": [
            "let ${1:hasValue} = includes(${2:array}, ${3:value})"
        ],
        "description": "Check if array contains value"
    },
    "For Each": {
        "prefix": "foreach",
        "body": [
            "forEach(${1:array}, func(${2:item}) {",
            "\t${3:// process item}",
            "})"
        ],
        "description": "Execute function for each array element"
    },
    "Is String": {
        "prefix": "isstring",
        "body": [
            "if (isString(${1:value})) {",
            "\t${2:// value is a string}",
            "}"
        ],
        "description": "Check if value is a string"
    },
    "Is Number": {
        "prefix": "isnumber",
        "body": [
            "if (isNumber(${1:value})) {",
            "\t${2:// value is a number}",
            "}"
        ],
        "description": "Check if value is a number"
    },
    "Is Array": {
        "prefix": "isarray",
        "body": [
            "if (isArray(${1:value})) {",
            "\t${2:// value is an array}",
            "}"
        ],
        "description": "Check if value is an array"
    },
    "Is Map": {
        "prefix": "ismap",
        "body": [
            "if (isMap(${1:value})) {",
            "\t${2:// value is a map}",
            "}"
        ],
        "description": "Check if value is a map/object"
    },
    "Is Null": {
        "prefix": "isnull",
        "body": [
            "if (isNull(${1:value})) {",
            "\t${2:// value is null}",
            "}"
        ],
        "description": "Check if value is null"
    },
    "Is Bool": {
        "prefix": "isbool",
        "body": [
            "if (isBool(${1:value})) {",
            "\t${2:// value is a boolean}",
            "}"
        ],
        "description": "Check if value is a boolean"
    },
    "Arc Sine": {
        "prefix": "asin",
        "body": [
            "let ${1:result} = asin(${2:value})"
        ],
        "description": "Calculate arc sine"
    },
    "Arc Cosine": {
        "prefix": "acos",
        "body": [
            "let ${1:result} = acos(${2:value})"
        ],
        "description": "Calculate arc cosine"
    },
    "Arc Tangent": {
        "prefix": "atan",
        "body": [
            "let ${1:result} = atan(${2:value})"
        ],
        "description": "Calculate arc tangent"
    },
    "Arc Tangent 2": {
        "prefix": "atan2",
        "body": [
            "let ${1:angle} = atan2(${2:y}, ${3:x})"
        ],
        "description": "Calculate angle from coordinates"
    },
    "Cube Root": {
        "prefix": "cbrt",
        "body": [
            "let ${1:result} = cbrt(${2:value})"
        ],
        "description": "Calculate cube root"
    }
}
  